{"ast":null,"code":"import _asyncToGenerator from \"C:/full-stack/managment full-stack angular/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { appConfig } from '../utils/app-config';\nimport { firstValueFrom } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAllCustomers() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this.http.get(appConfig.customersUrl);\n      const customers = yield firstValueFrom(observable);\n      return customers;\n    })();\n  }\n  getAllTasks() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this2.http.get(appConfig.tasksUrl);\n      const tasks = yield firstValueFrom(observable);\n      return tasks;\n    })();\n  }\n  addNewTask(task) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this3.http.post(appConfig.tasksUrl, task);\n      yield firstValueFrom(observable);\n    })();\n  }\n  deleteTask(taskId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this4.http.delete(appConfig.tasksUrl + taskId);\n      yield firstValueFrom(observable);\n    })();\n  }\n  editTask(task) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this5.http.patch(appConfig.tasksUrl + task.taskId, task);\n      yield firstValueFrom(observable);\n    })();\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,cAAc,QAAQ,MAAM;;;AAOrC,OAAM,MAAOC,WAAW;EAEpBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAE3BC,eAAe;IAAA;IAAA;MACxB,MAAMC,UAAU,GAAG,KAAI,CAACF,IAAI,CAACG,GAAG,CAAkBP,SAAS,CAACQ,YAAY,CAAC;MACzE,MAAMC,SAAS,SAASR,cAAc,CAACK,UAAU,CAAC;MAClD,OAAOG,SAAS;IAAC;EACrB;EAEaC,WAAW;IAAA;IAAA;MACpB,MAAMJ,UAAU,GAAG,MAAI,CAACF,IAAI,CAACG,GAAG,CAAcP,SAAS,CAACW,QAAQ,CAAC;MACjE,MAAMC,KAAK,SAASX,cAAc,CAACK,UAAU,CAAC;MAC9C,OAAOM,KAAK;IAAC;EACjB;EAIaC,UAAU,CAACC,IAAe;IAAA;IAAA;MACnC,MAAMR,UAAU,GAAG,MAAI,CAACF,IAAI,CAACW,IAAI,CAAYf,SAAS,CAACW,QAAQ,EAAEG,IAAI,CAAC;MACtE,MAAMb,cAAc,CAACK,UAAU,CAAC;IAAC;EACrC;EAEaU,UAAU,CAACC,MAAc;IAAA;IAAA;MAClC,MAAMX,UAAU,GAAG,MAAI,CAACF,IAAI,CAACc,MAAM,CAAYlB,SAAS,CAACW,QAAQ,GAAGM,MAAM,CAAC;MAC3E,MAAMhB,cAAc,CAACK,UAAU,CAAC;IAAC;EACrC;EAEaa,QAAQ,CAACL,IAAe;IAAA;IAAA;MACjC,MAAMR,UAAU,GAAG,MAAI,CAACF,IAAI,CAACgB,KAAK,CAAYpB,SAAS,CAACW,QAAQ,GAAGG,IAAI,CAACG,MAAM,EAAEH,IAAI,CAAC;MACrF,MAAMb,cAAc,CAACK,UAAU,CAAC;IAAC;EACrC;;AA/BSJ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAmB,SAAXnB,WAAW;EAAAoB,YAFR;AAAM","names":["appConfig","firstValueFrom","DataService","constructor","http","getAllCustomers","observable","get","customersUrl","customers","getAllTasks","tasksUrl","tasks","addNewTask","task","post","deleteTask","taskId","delete","editTask","patch","factory","providedIn"],"sourceRoot":"","sources":["C:\\full-stack\\managment full-stack angular\\Frontend\\src\\app\\services\\data.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { appConfig } from '../utils/app-config';\nimport { firstValueFrom } from \"rxjs\";\nimport CustomerModel from '../models/customer-model';\nimport TaskModel from '../models/task-model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DataService {\n\n    constructor(private http: HttpClient) { }\n\n    public async getAllCustomers(): Promise<CustomerModel[]> {\n        const observable = this.http.get<CustomerModel[]>(appConfig.customersUrl);\n        const customers = await firstValueFrom(observable);\n        return customers;\n    }\n\n    public async getAllTasks(): Promise<TaskModel[]> {\n        const observable = this.http.get<TaskModel[]>(appConfig.tasksUrl);\n        const tasks = await firstValueFrom(observable);\n        return tasks;\n    }\n\n    \n\n    public async addNewTask(task: TaskModel): Promise<void> {\n        const observable = this.http.post<TaskModel>(appConfig.tasksUrl, task);\n        await firstValueFrom(observable);\n    }\n\n    public async deleteTask(taskId: number): Promise<void> {\n        const observable = this.http.delete<TaskModel>(appConfig.tasksUrl + taskId);\n        await firstValueFrom(observable);\n    }\n\n    public async editTask(task: TaskModel): Promise<void> {\n        const observable = this.http.patch<TaskModel>(appConfig.tasksUrl + task.taskId, task);\n        await firstValueFrom(observable);\n    }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}